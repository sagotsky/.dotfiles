must_be                 	 labels.size.must_be :==, 0
must_be_close_to        	 traits.size.must_be_close_to 1,1
must_be_empty           	 labels.must_be_empty
must_be_instance_of     	 hipster.must_be_instance_of Hipster
must_be_kind_of         	 labels.must_be_kind_of Enumerable
must_be_nil             	 labels.first.must_be_nil
must_be_same_as         	 traits.must_be_same_as traits
must_be_silent          	 proc { "no stdout or stderr" }.must_be_silent
must_be_within_epsilon  	 traits.size.must_be_within_epsilon 1,1
must_equal              	 traits.size.must_equal 2
must_include            	 traits.must_include "skinny jeans"
must_match              	 traits.first.must_match /silly/
must_output             	 proc { print "#{traits.size}!" }.must_output "2!"
must_respond_to         	 traits.must_respond_to :count
must_raise              	 proc { traits.foo }.must_raise NoMethodError
must_send               	 traits.must_send [traits, :values_at, 0]
must_throw              	 proc { throw Exception if traits.any? }.must_throw Exception

assert              	 assert @traits.any?, "empty subjects"
assert_empty        	 assert_empty @labels
assert_equal        	 assert_equal 2, @traits.size
assert_in_delta     	 assert_in_delta @traits.size, 1,1
assert_in_epsilon   	 assert_in_epsilon @traits.size, 1, 1
assert_includes     	 assert_includes @traits, "skinny jeans"
assert_instance_of  	 assert_instance_of Hipster, @hipster
assert_kind_of      	 assert_kind_of Enumerable, @labels
assert_match        	 assert_match @traits.first, /silly/
assert_nil          	 assert_nil @labels.first
assert_operator     	 assert_operator @labels.size, :== , 0
assert_output       	 assert_output("Size: 2") { print "Size: #{@traits.size}"}
assert_raises       	 assert_raises(NoMethodError) { @traits.foo }
assert_respond_to   	 assert_respond_to @traits, :count
assert_same         	 assert_same @traits, @traits, "It's the same object silly"
assert_send         	 assert_send [@traits, :values_at, 0]
assert_silent       	 assert_silent { "no stdout or stderr" }
assert_throws       	 assert_throws(Exception,'is empty') {throw Exception if @traits.any?}


