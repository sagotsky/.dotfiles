""" Settings and init

echo new Date().toString()
colorscheme sagotsky2
let mapleader=","
set titlestring=''
set defsearch=google
set gui=none

""" Command keys

noremap ZZ  zz 
noremap j   5j
noremap k   5k
noremap s   og 

""" Custom command keys

" rc reading, loading
noremap <leader>s :rc <cr>
noremap <leader>S :sorc <cr>
noremap <leader>g :togglegui <cr>

""" Custom commands
com! rc     !gvim ~/.vimperatorrc ~/.vimperator/colors/sagotsky2.vimp &
com! sorc   so ~/.vimperatorrc

" rename a tab (not sticky though)
command! tabrename -nargs=? javascript content.document.title = "<args>"; 

" send to chrome
command! chrome -nargs=0 execute "!google-chrome '" + content.location + "' &> /dev/null &"

" display all or no gui.  (for the wife)
command! annotate -nargs=+ javascript vimp_annotate("<args>")     
command! togglegui -nargs=0 javascript togglegui()                
command! passkeys -nargs=+ javascript vimp_passkeys("<args>")    
command! formulate -nargs=0 javascript vimp_formulate()         

javascript <<EOF
  function togglegui() {
    liberator.globalVariables.gui = (liberator.globalVariables.gui == 'none' || typeof(liberator.globalVariables.gui) == 'undefined') ? 'menu,navigation,tabs' : 'none'
    liberator.execute('set gui=' + liberator.globalVariables.gui) 
  }

  function vimp_formulate() {
    nl = content.document.querySelectorAll('input[type=radio]')

    radio_groups = Array.prototype.slice.call(nl).reduce( function(ret, val) { 
      if (typeof(ret[val.name]) == 'undefined') {
        ret[val.name] = [];
      } 
      ret[val.name].push(val.id);
      return ret; 
    }, {})

    for (name in radio_groups) {
      ids = radio_groups[name];
      var id = ids[ Math.floor(Math.random() * ids.length) ];
      content.document.querySelector('#' + id).click()
    }
  }

  function vimp_passkeys(pass_keys) {
    all_keys = ":?abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split("");
    pass_keys = pass_keys.split('')
    keep_keys = all_keys.reduce( function(ret, key) {
      (pass_keys.indexOf(key) == -1) && ret.push(key);
      return ret;
      }, []);

    // domain => feedly\\.com escaped twice before getting regex?
    ignoreKeys.add('http://'+content.document.domain, keep_keys)
  }

  function vimp_annotate(text) {
    body = content.document.getElementsByTagName('body')[0];
    cursor = body.style.cursor;

    function keep_annotation(e) {
      body.style.cursor = cursor;
      elem = content.document.querySelector('.vimp_annotating');
      elem.className = '';
      elem.style.opacity = 1;
      body.removeEventListener('click', keep_annotation);
      body.removeEventListener('mousemove', move_annotation);
    }

    function move_annotation(e) {
      elem = content.document.querySelector('.vimp_annotating');
      elem.style.left = e.clientX + content.window.pageXOffset - elem.offsetWidth/2 + 'px';
      elem.style.top  = e.clientY + content.window.pageYOffset - elem.offsetHeight  + 'px';
    }

    try { 
      body.addEventListener('click', keep_annotation);
      body.addEventListener('mousemove', move_annotation);

      body.style.cursor = 'crosshair';
      var style = {opacity: 0.7, color: 'red', fontSize: '200%', fontWeight: 'bold', fontFamily: 'fantasy', position: 'absolute', top: '50%', left: '50%', zIndex: 50, letterSpacing: '1.5px', textShadow: '0 2px 2px #000, -1px -1px 0 #fff, -1px 1px 0 #fff, 1px 1px 0 #fff, 1px -1px 0 #fff' };
      elem = vimp_annotate_text_node(text, style);
      elem.className = 'vimp_annotating';
      body.appendChild(elem);
      //body.removeEventListener('click', annotate)   ;
    } catch (err) { // bail out before altering cursor
      alert(err.toSource()); 
      return; 
    } 
  }

  function vimp_annotate_text_node(text, style) {
    var elem = content.document.createElement('h1');
    var annotation = content.document.createTextNode(text);
    elem.appendChild(annotation);
    for (var prop in style) { elem.style[prop] = style[prop]; }
    return elem;
  }
EOF

"Todo: 
"   js - javascript with automatic alert/content.conole.log/echo/overlay
"   annotation
"     * add dom node immediately, but transparent.  have it follow mouse.  then
"     place it
"     * images.  rotatable?
"
